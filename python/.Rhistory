}
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
qqPlot(clt,
main = "Normal Distribution With Data Set n = 10",
col = "orange"
)
mean(clt)
sd(clt)
set.seed(2001) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
#lambda <- rnorm(1, mean = 10, sd = sqrt(40))
clt <- c(clt, mean(rpois(n, 10)))
}
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
qqPlot(clt,
main = "Normal Distribution With Data Set n = 10",
col = "orange"
)
mean(clt)
sd(clt)
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 40, and the sample size is 40.
rm(list=ls())
#------case 3---------------------------------
#Case 3: the population follows chi-squared distribution with mean 10 and variance 20, and the sample size is 40.
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
clt <- c(clt, mean(rchisq(n, df = 1, ncp = 0)))
}
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Chi-Square Distribution", col='beige')
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 40, and the sample size is 40.
rm(list=ls())
set.seed(2001) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
#lambda <- rnorm(1, mean = 10, sd = sqrt(40))
clt <- c(clt, mean(rpois(n, 10)))
}
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
qqPlot(clt,
main = "Normal Distribution With Data Set n = 10",
col = "orange"
)
mean(clt)
sd(clt)
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 40, and the sample size is 40.
rm(list=ls())
set.seed(2001) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
#lambda <- rnorm(1, mean = 10, sd = sqrt(40))
clt <- c(clt, mean(rpois(n, 10)))
}
clt = (clt - 10)/(sqrt(40)/sqrt(n))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 40, and the sample size is 40.
rm(list=ls())
set.seed(2001) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
#lambda <- rnorm(1, mean = 10, sd = sqrt(40))
clt <- c(clt, mean(rpois(n, 10)))
}
clt = (clt - 10)/((sqrt(40)/sqrt(n)))
#------case 3---------------------------------
#Case 3: the population follows chi-squared distribution with mean 10 and variance 20, and the sample size is 40.
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
clt <- c(clt, mean(rchisq(n, df = 1, ncp = 0)))
}
clt = (clt - 10)/((sqrt(20)/sqrt(n)))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Chi-Square Distribution", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
#------case 2---------------------------------
#the population follows normal distribution with mean 10 and variance 4, and the sample size is 40.
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
n <- 40 # sample size
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(n, mean = 10, sd = sqrt(4))))
}
clt = (clt - 10)/((sqrt(4)/sqrt(n)))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
size <- 10 # sample size
variance <- 4
mean <- 10
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(n, mean = 10, sd = sqrt(4))))
}
clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
size <- 10 # sample size
variance <- 4
mean <- 10
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(n, mean = 10, sd = sqrt(4))))
}
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
size <- 10 # sample size
variance <- 4
mean <- 10
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
plot(density(clt), main="Estimated Density")
library(car)
qqPlot(clt,
main = "Normal Distribution With Data Set n = 10",
col = "orange"
)
clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
size <- 10 # sample size
variance <- 4
mean <- 10
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
#clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
qqnorm(clt)
qqline(clt)
mean(clt)
mean(clt) - 10
sd(clt)
sd(clt)
rm(list=ls())
set.seed(2000) # for reproducability
# create an empty vector for the means of exponential samples
clt <- NULL
size <- 10 # sample size
variance <- 4
mean <- 10
# take the mean of 40 samples of the exponential distribution. repeat 1,000 times
for (i in 1:1000) {
#clt <- c(clt, mean(rexp(n, lambda)))
clt <- c(clt, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
hist(clt, xlab='Sample Mean', main="Histogram of Sample Means from an Normal Distribution (n=10)", col='beige')
hist(clt, breaks=50, col='beige', main="Histogram of Simulated Means")
rm(list=ls())
set.seed(2000)
size <- 10 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
mean_new = (mean_new - mean)/((sqrt(variance)/sqrt(size))) #clt = 0 sd = 1
qqnorm(mean_new)
rm(list=ls())
set.seed(2000)
size <- 10 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean, sd = sqrt(variance))))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 20 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
clt <- c(clt, mean(rchisq(size, df = mean, ncp = 0)))
}
clt = (clt - mean)/((sqrt(variance)/sqrt(size)))
qqnorm(mean_new)
mean_new <- NULL
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 20 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rchisq(size, df = mean, ncp = 0)))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 10, and the sample size is 40.
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 20 # population variance
mean <- 10 # population mean
mean_new <- NULL
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 10, and the sample size is 40.
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 10 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rpois(size, 10)))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 10 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean = 10, sd = sqrt(4))))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 10 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean, sd = sqrt(variance))))
}
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 10 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
q = rnorm(size, mean, sd = sqrt(variance))
mean_new <- c(mean_new, mean(rnorm(size, mean, sd = sqrt(variance))))
}
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 4 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rnorm(size, mean, sd = sqrt(variance))))
}
qqnorm(mean_new)
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 20 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rchisq(size, df = mean, ncp = 0)))
}
qqnorm(mean_new)
qqline(mean_new)
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
#------case 4---------------------------------
#Case 4: the population follows poisson distribution with mean 10 and variance 10, and the sample size is 40.
rm(list=ls())
set.seed(2000)
size <- 40 # sample size
variance <- 10 # population variance
mean <- 10 # population mean
mean_new <- NULL
for (i in 1:10000)
{
mean_new <- c(mean_new, mean(rpois(size, 10)))
}
qqnorm(mean_new)
qqline(mean_new)
qqnorm(mean_new)
qqline(mean_new)
mean(mean_new) - mean
sd(mean_new) - sqrt(variance)/sqrt(size)
install.packages("rjson")
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/raw")
json_data <- fromJSON(file='4.json')
install.packages("rjson")
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/raw")
json_data <- fromJSON(file='4.json')
library(rjson)
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/raw")
json_data <- fromJSON(file='4.json')
View(json_data)
library(rjson)
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/python")
read.csv("4.csv", header = TRUE)
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/python")
study4 = read.csv("4.csv", header = TRUE)
View(study4)
#clear the variable in the history
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/python")  ## set the working directory
study4 = read.csv("4.csv", header = TRUE)
study5 = read.csv("5.csv", header = TRUE)
study6 = read.csv("6.csv", header = TRUE)
study7 = read.csv("7.csv", header = TRUE)
study8 = read.csv("8.csv", header = TRUE)
study9 = read.csv("9.csv", header = TRUE)
head study4
head(study4)
View(study4)
index <- c(1:200)*4
index <- c(1:200)
index <- seq(from = 4, to = 4, length.out = 354)
while ( i < 10)
i = 4
i <- 1
i <- 4
while ( i < 10)
{
i = i + 1
}
as.character(i)
while ( i < 10)
{
studyname = paste('study', as.character(i))
index <- seq(from = 4, to = 4, length.out = )
i = i + 1
}
{
studyname <- paste('study', as.character(i))
index <- seq(from = 4, to = 4, length.out = )
i = i + 1
}
index <- seq(from = 4, to = 4, length.out = nrow(study4))
index <- seq(from = 4, to = 4, length.out = nrow(study4))
study4$index <- index
install.packages("rjson")
library(rjson)
install.packages("rjson")
install.packages(tibble)
install(tibble)
install.packages('tibble')
library(tibble)
study4$index <- index
add_column(study4, index, .before = 'X')
library(tibble)
index <- seq(from = 4, to = 4, length.out = nrow(study4))
study4$index <- index
add_column(study4, index, .before = 'X')
update.packages('tibble')
library(tibble)
#clear the variable in the history
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/python")  ## set the working directory
study4 = read.csv("4.csv", header = TRUE)
study5 = read.csv("5.csv", header = TRUE)
study6 = read.csv("6.csv", header = TRUE)
study7 = read.csv("7.csv", header = TRUE)
study8 = read.csv("8.csv", header = TRUE)
study9 = read.csv("9.csv", header = TRUE)
library(tibble)
index <- seq(from = 4, to = 4, length.out = nrow(study4))
study4$index <- index
add_column(study4, index, .before = 'X')
install.packages("tidyverse")
library(tibble)
index <- seq(from = 4, to = 4, length.out = nrow(study4))
study4$index <- index
add_column(study4, index, .before = 'X')
rm(list=ls())
setwd("/Users/marxwang/Desktop/CODE/R/MutiThread/python")  ## set the working directory
study4 = read.csv("4.csv", header = TRUE)
study5 = read.csv("5.csv", header = TRUE)
study6 = read.csv("6.csv", header = TRUE)
study7 = read.csv("7.csv", header = TRUE)
study8 = read.csv("8.csv", header = TRUE)
study9 = read.csv("9.csv", header = TRUE)
library(tibble)
index <- seq(from = 4, to = 4, length.out = nrow(study4))
update.packages(vctrs)
update.packages('vctrs')
library(tibble)
remotes::update_packages("vctrs")
install.packages(remotes)
install.packages('remotes')
remotes::update_packages("vctrs")
library(tibble)
index <- seq(from = 4, to = 4, length.out = nrow(study4))
study4$index <- index
add_column(study4, index, .before = 'X')
